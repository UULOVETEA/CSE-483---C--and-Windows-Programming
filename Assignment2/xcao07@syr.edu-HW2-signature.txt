<Window x:Class="TicTacToe.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:TicTacToe"
        mc:Ignorable="d"
        Title="MainWindow" Height="500" Width="400">
    <Grid>
        <ItemsControl  x:Name="MyItemsControl" Width="310" HorizontalAlignment="Center" VerticalAlignment="Top" Margin="0,10,0,0">
            <ItemsControl.ItemTemplate>
                <DataTemplate>
                    <Border BorderThickness="1" BorderBrush="Black">
                        <TextBlock MouseLeftButtonDown="Button_Click" Height="100.0" Width="100.0"
                        Text="{Binding TileLabel}" Foreground="{Binding TileBrush}" Background="{Binding TileBackground}"
                        FontSize="60" FontWeight="Bold"
                        TextAlignment="Center"/>
                    </Border>
                </DataTemplate>
            </ItemsControl.ItemTemplate>
            <ItemsControl.ItemsPanel>
                <ItemsPanelTemplate>
                    <!-- A WrapPanel ensures the items wrap to the next line -->
                    <!-- when it runs out of room in the window dimensions -->
                    <WrapPanel Orientation="Horizontal"/>
                </ItemsPanelTemplate>
            </ItemsControl.ItemsPanel>
        </ItemsControl>
        
        <Button x:Name="Play_Button" Content="Play" HorizontalAlignment="Left" VerticalAlignment="Top" Width="90" Margin="45,340,0,0" Height="40" Click="Play_Button_Click"/>
        <Button x:Name="Restart_Button" Content="Restart" HorizontalAlignment="Left" VerticalAlignment="Top" Width="90" Margin="255,340,0,0" Height="40" Click="Restart_Button_Click"/>
        <Label x:Name="Status_Label" Content="{Binding Status}" Background="{Binding LabelColor}" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="43,408,0,0" Width="302" Height="40" FontSize="18"/>
    </Grid>
</Window>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;

///
/// Program Name: TicTacToe
/// Author: Xiaomeng Cao
/// Date: March 9, 2017
/// Course: CSE-483
///

namespace TicTacToe
{
    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {
        private readonly Model _model;

        public MainWindow()
        {
            InitializeComponent();

            this.ResizeMode = ResizeMode.NoResize;
            _model = new Model();
            this.DataContext = _model;
        }

        private void Button_Click(object sender, RoutedEventArgs e)
        {
            var selectedButton = e.OriginalSource as FrameworkElement;
            if (selectedButton != null)
            {
                var currentTile = selectedButton.DataContext as Tile;
                _model.UserSelection(currentTile.TileName);
            }
        }

        private void Restart_Button_Click(object sender, RoutedEventArgs e)
        {
            _model.Clear();
        }

        private void Play_Button_Click(object sender, RoutedEventArgs e)
        {
            MyItemsControl.ItemsSource = _model.TileCollection;
        }
    }
}
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Media;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;

///
/// Program Name: TicTacToe
/// Author: Xiaomeng Cao
/// Date: March 9, 2017
/// Course: CSE-483
///

namespace TicTacToe
{
    class Model : INotifyPropertyChanged
    {
        public event PropertyChangedEventHandler PropertyChanged;
        private void OnPropertyChanged(string propertyName)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        public ObservableCollection<Tile> TileCollection;
        private static UInt32 _numTiles = 9;
        int count = 0;

        private String _status = "";
        public String Status
        {
            get { return _status; }
            set
            {
                _status = value;
                OnPropertyChanged("Status");
            }
        }

        private Brush _labelColor;
        public Brush LabelColor
        {
            get { return _labelColor; }
            set
            {
                _labelColor = value;
                OnPropertyChanged("LabelColor");
            }
        }

        public Model()
        {
            TileCollection = new ObservableCollection<Tile>();

            // initial all buttons
            for (int i = 0; i < _numTiles; i++)
            {
                TileCollection.Add(new Tile()
                {
                    TileBrush = Brushes.Black,
                    TileLabel = "",
                    TileName = i.ToString(),
                    TileBackground = Brushes.LightGray
                });
            }
        }
        
        // function to check if any player win the game or we have a draw
        void CheckWinner()
        {
            // if any player has the same Xs or Os on the specific row
            if (TileCollection[0].TileLabel != "" && TileCollection[0].TileLabel == TileCollection[1].TileLabel && TileCollection[1].TileLabel == TileCollection[2].TileLabel)
            {
                MarkWinner(0, 1, 2);
            }
            else if (TileCollection[3].TileLabel != "" && TileCollection[3].TileLabel == TileCollection[4].TileLabel && TileCollection[4].TileLabel == TileCollection[5].TileLabel)
            {
                MarkWinner(3, 4, 5);
            }
            else if (TileCollection[6].TileLabel != "" && TileCollection[6].TileLabel == TileCollection[7].TileLabel && TileCollection[7].TileLabel == TileCollection[8].TileLabel)
            {
                MarkWinner(6, 7, 8);
            }
            else if (TileCollection[0].TileLabel != "" && TileCollection[0].TileLabel == TileCollection[4].TileLabel && TileCollection[4].TileLabel == TileCollection[8].TileLabel)
            {
                MarkWinner(0, 4, 8);
            }
            else if (TileCollection[2].TileLabel != "" && TileCollection[2].TileLabel == TileCollection[4].TileLabel && TileCollection[4].TileLabel == TileCollection[6].TileLabel)
            {
                MarkWinner(2, 4, 6);
            }
            else if (TileCollection[0].TileLabel != "" && TileCollection[0].TileLabel == TileCollection[3].TileLabel && TileCollection[3].TileLabel == TileCollection[6].TileLabel)
            {
                MarkWinner(0, 3, 6);
            }
            else if (TileCollection[1].TileLabel != "" && TileCollection[1].TileLabel == TileCollection[4].TileLabel && TileCollection[4].TileLabel == TileCollection[7].TileLabel)
            {
                MarkWinner(1, 4, 7);
            }
            else if (TileCollection[2].TileLabel != "" && TileCollection[2].TileLabel == TileCollection[5].TileLabel && TileCollection[5].TileLabel == TileCollection[8].TileLabel)
            {
                MarkWinner(2, 5, 8);
            }
            // else if no one win the game
            else if (TileCollection[0].isSet == true && TileCollection[1].isSet == true && TileCollection[2].isSet == true
                && TileCollection[3].isSet == true && TileCollection[4].isSet == true && TileCollection[5].isSet == true
                && TileCollection[6].isSet == true && TileCollection[7].isSet == true && TileCollection[8].isSet == true)
            {
                Status = "We have a tie!";
                LabelColor = Brushes.Orange;
            }
        }

        // function to get the specific number and highlight the winning row
        void MarkWinner(int a, int b, int c)
        {
            // highlight the specific row
            TileCollection[a].TileBackground = Brushes.Yellow;
            TileCollection[b].TileBackground = Brushes.Yellow;
            TileCollection[c].TileBackground = Brushes.Yellow;
            // print out winning message
            Status = "We have a winner!";
            // change the label color to lime
            LabelColor = Brushes.Lime;
            // make all buttons disable
            for (int x = 0; x < _numTiles; x++)
            {
                TileCollection[x].isSet = true;
            }
        }

        public void UserSelection(String buttonSelected)
        {
            // get the number which button the user clicked
            int index = int.Parse(buttonSelected);
            // increase count in order to determing is X turn or O turn
            count++;

            // if the button has already clicked
            if (TileCollection[index].isSet)
            {
                // print out the error message
                Status = "Error, button already clicked";
                // change the label color to red
                LabelColor = Brushes.Red;
                // decrease count to make any player will not have two chances
                count--;
                return;
            }

            // if count is odd
            if (count%2 != 0)
            {
                // place X on the button
                TileCollection[index].TileLabel = "X";
                // make the X to red
                TileCollection[index].TileBrush = Brushes.Red;
                // disable the button
                TileCollection[index].isSet = true;
                // clear the status label
                Status = "";
                // change the label color to white
                LabelColor = Brushes.White;
            }
            // else count is even
            else
            {
                TileCollection[index].TileLabel = "O";
                TileCollection[index].TileBrush = Brushes.Blue;
                TileCollection[index].isSet = true;
                Status = "";
                LabelColor = Brushes.White;
            }
            
            // call function CheckWinner to check if any player win
            CheckWinner();       
        }

        // fucntion to clear contents of the buttons and label
        public void Clear()
        {
            // clear the all buttons and make them to original
            for (int x = 0; x < _numTiles; x++)
            {
                TileCollection[x].TileBackground = Brushes.LightGray;
                TileCollection[x].TileBrush = Brushes.Black;
                TileCollection[x].TileLabel = "";
                // enable all buttons
                TileCollection[x].isSet = false;
            }

            // reset the count to 0
            count = 0;
            // clear the status label
            Status = "";
            // change the label color to white
            LabelColor = Brushes.White;
        }
    }
}
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

// INotifyPropertyChanged
using System.ComponentModel;

// Brushes
using System.Windows.Media;

///
/// Program Name: TicTacToe
/// Author: Xiaomeng Cao
/// Date: March 9, 2017
/// Course: CSE-483
///

namespace TicTacToe
{
    public class Tile : INotifyPropertyChanged
    {
        public event PropertyChangedEventHandler PropertyChanged;
        private void OnPropertyChanged(string propertyName)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private string _tileName;
        public string TileName
        {
            get { return _tileName; }
            set
            {
                _tileName = value;
                OnPropertyChanged("TileName");
            }
        }

        private string _tileLabel;
        public string TileLabel
        {
            get { return _tileLabel; }
            set
            {
                _tileLabel = value;
                OnPropertyChanged("TileLabel");
            }
        }

        private Brush _tileBrush;
        public Brush TileBrush
        {
            get { return _tileBrush; }
            set
            {
                _tileBrush = value;
                OnPropertyChanged("TileBrush");
            }
        }

        private Brush _tileBackground = Brushes.Coral;
        public Brush TileBackground
        {
            get { return _tileBackground; }
            set
            {
                _tileBackground = value;
                OnPropertyChanged("TileBackground");
            }
        }

        public bool isSet { get; set; }
    }
}
